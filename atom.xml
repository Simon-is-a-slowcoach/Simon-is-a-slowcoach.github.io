<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Simon is a slowcoach.</title>
  <subtitle>Better late than never.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://simon-is-a-slowcoach.github.io/"/>
  <updated>2018-03-01T17:53:17.424Z</updated>
  <id>https://simon-is-a-slowcoach.github.io/</id>
  
  <author>
    <name>Simon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一段约束传递的示例代码</title>
    <link href="https://simon-is-a-slowcoach.github.io/2018/03/02/propagating-constraints-example-code/"/>
    <id>https://simon-is-a-slowcoach.github.io/2018/03/02/propagating-constraints-example-code/</id>
    <published>2018-03-01T17:09:48.000Z</published>
    <updated>2018-03-01T17:53:17.424Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;华氏和摄氏温度的关系: 9 <em> c = 5 </em> (f - 32)<br>&emsp;&emsp;<img src="http://www-inst.eecs.berkeley.edu/~cs61a/sp12/book/img/constraints.png" alt="约束网络图示"><br>&emsp;&emsp;上代码(从<a href="http://www-inst.eecs.berkeley.edu/~cs61a/sp12/book/objects.html#example-propagating-constraints" target="_blank" rel="external">出处</a>稍微修改后的):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, sub, mul, truediv</div><div class="line"></div><div class="line">celsius_name = <span class="string">"Celsisu"</span></div><div class="line">fahrenheit_name = <span class="string">"Fahrenheit"</span></div><div class="line">val_msg = <span class="string">"val"</span></div><div class="line">has_val_msg = <span class="string">"has_val"</span></div><div class="line">new_val_msg = <span class="string">"new_val"</span></div><div class="line">set_val_msg = <span class="string">"set_val"</span></div><div class="line">forget_msg = <span class="string">"forget"</span></div><div class="line">connect_msg = <span class="string">"connect"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_connector</span><span class="params">(value_can_be_clean, name = None)</span>:</span></div><div class="line">	   constraints = []</div><div class="line">    forgotten = <span class="keyword">False</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_value</span><span class="params">(value, source_constraint = None)</span>:</span></div><div class="line">        <span class="keyword">nonlocal</span> forgotten</div><div class="line">        val = connector[val_msg]</div><div class="line">        <span class="keyword">if</span> val <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            connector[val_msg] = value</div><div class="line">            forgotten = <span class="keyword">False</span></div><div class="line">            <span class="keyword">if</span> name <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                print(name, <span class="string">"="</span>, value)</div><div class="line">            inform_all_except(source_constraint, new_val_msg, constraints)</div><div class="line">        <span class="keyword">elif</span> val != value:</div><div class="line">            print(<span class="string">"Contradiction detected:"</span>, val, <span class="string">"vs"</span>, value)</div><div class="line">	        <span class="keyword">else</span>:</div><div class="line">	           print(name, <span class="string">"value not changed:"</span>, val)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forget_value</span><span class="params">(source_constraint = None)</span>:</span></div><div class="line">        <span class="keyword">nonlocal</span> forgotten</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> forgotten:</div><div class="line">   	        <span class="keyword">if</span> value_can_be_clean:</div><div class="line">   	            connector[val_msg] = <span class="keyword">None</span></div><div class="line">   	            <span class="keyword">if</span> name <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">    	               print(name, <span class="string">"is forgotten"</span>)</div><div class="line">   	        forgotten = <span class="keyword">True</span></div><div class="line">    	       inform_all_except(source_constraint, forget_msg, constraints)</div><div class="line">   	connector = &#123;</div><div class="line">   	    val_msg: <span class="keyword">None</span>,</div><div class="line">   	    set_val_msg: set_value,</div><div class="line">   	    has_val_msg: <span class="keyword">lambda</span>: connector[val_msg] <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>,</div><div class="line">   	    forget_msg: forget_value,</div><div class="line">   	    connect_msg: <span class="keyword">lambda</span> source_constraint: constraints.append(source_constraint),</div><div class="line">   	&#125;</div><div class="line">   	<span class="keyword">return</span> connector</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">constant</span><span class="params">(connector, value)</span>:</span></div><div class="line">   	constraint = &#123;&#125;</div><div class="line">   	connector[set_val_msg](value, constraint)</div><div class="line">   	<span class="keyword">return</span> constraint</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_ternary_constraint</span><span class="params">(a, b, c, get_c_via_ab, get_b_via_ca, get_a_via_cb)</span>:</span></div><div class="line">	   <span class="function"><span class="keyword">def</span> <span class="title">new_value</span><span class="params">()</span>:</span></div><div class="line">   	    a_has_val, b_has_val, c_has_val = [connector[has_val_msg]() <span class="keyword">for</span> connector <span class="keyword">in</span> (a, b, c)]</div><div class="line">    	   <span class="keyword">if</span> a_has_val <span class="keyword">and</span> b_has_val:</div><div class="line">   	        c[set_val_msg](get_c_via_ab(a[val_msg], b[val_msg]), constraint)</div><div class="line">   	    <span class="keyword">elif</span> a_has_val <span class="keyword">and</span> c_has_val:</div><div class="line">  		        b[set_val_msg](get_b_via_ca(c[val_msg], a[val_msg]), constraint)</div><div class="line">   	    <span class="keyword">elif</span> b_has_val <span class="keyword">and</span> c_has_val:</div><div class="line">   	        a[set_val_msg](get_a_via_cb(c[val_msg], b[val_msg]), constraint)</div><div class="line">   	<span class="function"><span class="keyword">def</span> <span class="title">forget_value</span><span class="params">()</span>:</span></div><div class="line">       	<span class="keyword">for</span> connector <span class="keyword">in</span> (a, b, c):</div><div class="line">       	    connector[forget_msg](constraint)</div><div class="line">   	constraint = &#123;new_val_msg: new_value, forget_msg: forget_value&#125;</div><div class="line">   	<span class="keyword">for</span> connector <span class="keyword">in</span> (a, b, c):</div><div class="line">   	    connector[connect_msg](constraint)</div><div class="line">   	<span class="keyword">return</span> constraint</div><div class="line"></div><div class="line"><span class="comment"># a + b = c</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">adder</span><span class="params">(a, b, c)</span>:</span></div><div class="line">    <span class="keyword">return</span> make_ternary_constraint(a, b, c, add, sub, sub)</div><div class="line"></div><div class="line"><span class="comment"># a * b = c</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiplier</span><span class="params">(a, b, c)</span>:</span></div><div class="line">	   <span class="keyword">return</span> make_ternary_constraint(a, b, c, mul, truediv, truediv)</div><div class="line"></div><div class="line"><span class="comment"># 9 * celsius = 5 * (fahrenheit - 32)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_converter</span><span class="params">(celsius, fahrenheit)</span>:</span></div><div class="line">	   connector_constant_9, connector_constant_5, connector_constant_32 = [make_connector(<span class="keyword">False</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>)]</div><div class="line">   	connector_mul_9_celsius, connector_sub_fahrenheit_32 = [make_connector(<span class="keyword">True</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">2</span>)]</div><div class="line">   	multiplier(connector_constant_9, celsius, connector_mul_9_celsius)</div><div class="line">   	multiplier(connector_constant_5, connector_sub_fahrenheit_32, connector_mul_9_celsius)</div><div class="line">   	adder(connector_sub_fahrenheit_32, connector_constant_32, fahrenheit)</div><div class="line">   	constant(connector_constant_5, <span class="number">5</span>)</div><div class="line">   	constant(connector_constant_9, <span class="number">9</span>)</div><div class="line">   	constant(connector_constant_32, <span class="number">32</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">inform_all_except</span><span class="params">(except_constraint, message, constraints)</span>:</span></div><div class="line">   	<span class="keyword">for</span> constraint <span class="keyword">in</span> constraints:</div><div class="line">       	<span class="keyword">if</span> constraint != except_constraint:</div><div class="line">           	constraint[message]()</div><div class="line"></div><div class="line">celsius = make_connector(<span class="keyword">True</span>, celsius_name)</div><div class="line">fahrenheit = make_connector(<span class="keyword">True</span>, fahrenheit_name)</div><div class="line">make_converter(celsius, fahrenheit)</div><div class="line"></div><div class="line"><span class="comment"># test code</span></div><div class="line">fahrenheit[set_val_msg](<span class="number">77</span>)</div><div class="line">print(<span class="string">" -"</span> * <span class="number">12</span>)</div><div class="line">celsius[set_val_msg](<span class="number">25</span>)</div><div class="line">print(<span class="string">" -"</span> * <span class="number">12</span>)</div><div class="line">celsius[forget_msg]()</div><div class="line">print(<span class="string">" -"</span> * <span class="number">12</span>)</div><div class="line">fahrenheit[set_val_msg](<span class="number">32</span>)</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;输出为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Fahrenheit = 77</div><div class="line">Celsisu = 25.0</div><div class="line"> - - - - - - - - - - - -</div><div class="line">Celsisu value not changed: 25.0</div><div class="line"> - - - - - - - - - - - -</div><div class="line">Celsisu is forgotten</div><div class="line">Fahrenheit is forgotten</div><div class="line"> - - - - - - - - - - - -</div><div class="line">Fahrenheit = 32</div><div class="line">Celsisu = 0.0</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;参考:<br>&emsp;&emsp;&emsp;&emsp;<a href="http://www-inst.eecs.berkeley.edu/~cs61a/sp12/book/objects.html#example-propagating-constraints" target="_blank" rel="external">出处</a><br>&emsp;&emsp;&emsp;&emsp;<a href="https://zh.wikipedia.org/wiki/%E7%BA%A6%E6%9D%9F%E8%A1%A5%E5%81%BF%E9%97%AE%E9%A2%98" target="_blank" rel="external">找到的一个Wikipedia链接</a><br>&emsp;&emsp;&emsp;&emsp;<a href="https://www.oschina.net/translate/sudoku?lang=chs" target="_blank" rel="external">扩展</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;华氏和摄氏温度的关系: 9 &lt;em&gt; c = 5 &lt;/em&gt; (f - 32)&lt;br&gt;&amp;emsp;&amp;emsp;&lt;img src=&quot;http://www-inst.eecs.berkeley.edu/~cs61a/sp12/book/img/const
    
    </summary>
    
    
      <category term="constraint propagation" scheme="https://simon-is-a-slowcoach.github.io/tags/constraint-propagation/"/>
    
      <category term="CS61A" scheme="https://simon-is-a-slowcoach.github.io/tags/CS61A/"/>
    
      <category term="Python" scheme="https://simon-is-a-slowcoach.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>老项目对于iOS10字体变大问题的一个临时应对措施</title>
    <link href="https://simon-is-a-slowcoach.github.io/2016/11/15/one-trick-for-new-larger-font-and-old-size-label/"/>
    <id>https://simon-is-a-slowcoach.github.io/2016/11/15/one-trick-for-new-larger-font-and-old-size-label/</id>
    <published>2016-11-15T15:17:05.000Z</published>
    <updated>2016-11-15T16:17:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;目前维护的老项目还是手写frame(请同情我), 所以在产品支持iOS10的时候自然遇到了因为字体变大导致一些文本内容(如: <code>label.text</code> 和 <code>lable.attributedText</code>)不能显示完整的问题(…此时真的蛮怀念<strong>AutoLayout</strong>, Orz).<br>&emsp;&emsp;那么, 既然时间紧任务重, 而我又太懒, 所以决定AOP一下试试.<br>&emsp;&emsp;经观察发现:<br>&emsp;&emsp;&emsp;&emsp;1.项目里基本上99%以上的UIFont都是通过<code>+ (NSFont *)systemFontOfSize:(CGFloat)fontSize</code>来得到的(说到这里有点想吐槽但还是忍住了);<br>&emsp;&emsp;&emsp;&emsp;2.iOS10之前的系统的默认字体, 其<code>(lineHeight / pointSize)</code> 基本是同一个值: 1.193000f, 而iOS10上的默认字体的这个值是比之前的要大(所以新字体是更大的).<br>&emsp;&emsp;那么, 上代码:<br><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIFont</span> (<span class="title">Tuning</span>)</span></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="built_in">CGFloat</span> lineHeightPerPointOfOldSystemFont = <span class="number">1.193000</span>f;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIFont</span> (<span class="title">Tuning</span>)</span></div><div class="line">+ (<span class="keyword">void</span>)load &#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        [<span class="keyword">self</span> swizzleClassMethods];</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)swizzleClassMethods &#123;</div><div class="line">    <span class="built_in">NSArray</span>&lt;<span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *&gt; *selectorStrArr = @[</div><div class="line">            @[<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(systemFontOfSize:)), <span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(s_systemFontOfSize:)),],</div><div class="line">            @[<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(boldSystemFontOfSize:)), <span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(s_boldSystemFontOfSize:)),],</div><div class="line">            @[<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(italicSystemFontOfSize:)), <span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(s_italicSystemFontOfSize:)),],</div><div class="line">    ];</div><div class="line"></div><div class="line">    Class <span class="keyword">class</span> = object_getClass(<span class="keyword">self</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *arr <span class="keyword">in</span> selectorStrArr) &#123;</div><div class="line">        <span class="keyword">if</span> (arr.count != <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        SEL originalSelector = <span class="built_in">NSSelectorFromString</span>(arr[<span class="number">0</span>]);</div><div class="line">        SEL swizzledSelector = <span class="built_in">NSSelectorFromString</span>(arr[<span class="number">1</span>]);</div><div class="line">        Method originalMethod = class_getInstanceMethod(<span class="keyword">class</span>, originalSelector);</div><div class="line">        Method swizzledMethod = class_getInstanceMethod(<span class="keyword">class</span>, swizzledSelector);</div><div class="line"></div><div class="line">        <span class="built_in">BOOL</span> didAddMethod = class_addMethod(<span class="keyword">class</span>,</div><div class="line">                originalSelector,</div><div class="line">                method_getImplementation(swizzledMethod),</div><div class="line">                method_getTypeEncoding(swizzledMethod));</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (didAddMethod) &#123;</div><div class="line">            class_replaceMethod(<span class="keyword">class</span>,</div><div class="line">                    swizzledSelector,</div><div class="line">                    method_getImplementation(originalMethod),</div><div class="line">                    method_getTypeEncoding(originalMethod));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            method_exchangeImplementations(originalMethod, swizzledMethod);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">UIFont</span> *)s_systemFontOfSize:(<span class="built_in">CGFloat</span>)fontSize &#123;</div><div class="line">    <span class="built_in">UIFont</span> *font = [<span class="keyword">self</span> s_systemFontOfSize:fontSize];</div><div class="line">    <span class="built_in">CGFloat</span> tunedScaleFactor = [<span class="keyword">self</span> tunedScaleFactorForFontName:font.fontName];</div><div class="line">    <span class="keyword">if</span> (fabs(tunedScaleFactor - <span class="number">1.0</span>f) &gt;= FLT_EPSILON) &#123;</div><div class="line">        font = [<span class="keyword">self</span> s_systemFontOfSize:fontSize * tunedScaleFactor];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> font;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">UIFont</span> *)s_boldSystemFontOfSize:(<span class="built_in">CGFloat</span>)fontSize &#123;</div><div class="line">    <span class="built_in">UIFont</span> *font = [<span class="keyword">self</span> s_boldSystemFontOfSize:fontSize];</div><div class="line">    <span class="built_in">CGFloat</span> tunedScaleFactor = [<span class="keyword">self</span> tunedScaleFactorForFontName:font.fontName];</div><div class="line">    <span class="keyword">if</span> (fabs(tunedScaleFactor - <span class="number">1.0</span>f) &gt;= FLT_EPSILON) &#123;</div><div class="line">        font = [<span class="keyword">self</span> s_boldSystemFontOfSize:fontSize * tunedScaleFactor];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> font;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">UIFont</span> *)s_italicSystemFontOfSize:(<span class="built_in">CGFloat</span>)fontSize &#123;</div><div class="line">    <span class="built_in">UIFont</span> *font = [<span class="keyword">self</span> s_italicSystemFontOfSize:fontSize];</div><div class="line">    <span class="built_in">CGFloat</span> tunedScaleFactor = [<span class="keyword">self</span> tunedScaleFactorForFontName:font.fontName];</div><div class="line">    <span class="keyword">if</span> (fabs(tunedScaleFactor - <span class="number">1.0</span>f) &gt;= FLT_EPSILON) &#123;</div><div class="line">        font = [<span class="keyword">self</span> s_italicSystemFontOfSize:fontSize * tunedScaleFactor];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> font;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">CGFloat</span>) tunedScaleFactorForFontName:(<span class="built_in">NSString</span> *)srcFontName &#123;</div><div class="line">    <span class="built_in">CGFloat</span> scaleFactor;</div><div class="line">    <span class="built_in">CGFloat</span> testFontSize = <span class="number">12.0</span>f;</div><div class="line">    <span class="built_in">UIFont</span> *testFont = [<span class="built_in">UIFont</span> fontWithName:srcFontName size:testFontSize];</div><div class="line">    <span class="keyword">if</span> (!srcFontName || !testFont) &#123;</div><div class="line">        scaleFactor = <span class="number">1.0</span>f;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> ([<span class="keyword">self</span> scaleFactorDict][srcFontName]) &#123;</div><div class="line">            scaleFactor = [[<span class="keyword">self</span> scaleFactorDict][srcFontName] floatValue];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">CGFloat</span> lineHeightPerPointOfSrcFont = testFont.lineHeight / testFontSize;</div><div class="line">            <span class="keyword">if</span> (fabs(lineHeightPerPointOfSrcFont) &lt; FLT_EPSILON || lineHeightPerPointOfSrcFont &lt; lineHeightPerPointOfOldSystemFont || fabs(lineHeightPerPointOfSrcFont - lineHeightPerPointOfOldSystemFont) &lt; FLT_EPSILON) &#123;</div><div class="line">                scaleFactor = <span class="number">1.0</span>f;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                scaleFactor = lineHeightPerPointOfOldSystemFont / lineHeightPerPointOfSrcFont * <span class="number">0.95</span>f;<span class="comment">//发现效果没想象中完美所以又打了个九五折</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            [<span class="keyword">self</span> scaleFactorDict][srcFontName] = @(scaleFactor);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> scaleFactor;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">NSMutableDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="built_in">NSNumber</span> *&gt; *)scaleFactorDict &#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">NSMutableDictionary</span> *dict = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        dict = [<span class="built_in">NSMutableDictionary</span> dictionary];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> dict;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;就这样, 效果只能说还好(没有理论上达到完全和以前一样的效果), 勉强算是过关了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;目前维护的老项目还是手写frame(请同情我), 所以在产品支持iOS10的时候自然遇到了因为字体变大导致一些文本内容(如: &lt;code&gt;label.text&lt;/code&gt; 和 &lt;code&gt;lable.attributedText&lt;/code&gt;)不能
    
    </summary>
    
    
      <category term="iOS" scheme="https://simon-is-a-slowcoach.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>关于NSDecimalNumber的一点总结</title>
    <link href="https://simon-is-a-slowcoach.github.io/2016/11/05/something-about-NSDecimalNumber/"/>
    <id>https://simon-is-a-slowcoach.github.io/2016/11/05/something-about-NSDecimalNumber/</id>
    <published>2016-11-05T13:38:39.000Z</published>
    <updated>2016-11-13T13:35:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;最近工作中遇到一些关于浮点数的问题, 在这里总结一下:<br>&emsp;&emsp;1.如何由一个double的数据得到一个NSDecimalNumber:<br>&emsp;&emsp;经过一阵乱测发现 由 <code>+numberWithFloat:</code>, <code>+numberWithDouble:</code>, <code>-initWithFloat:</code>, <code>-initWithDouble:</code>等方法由float/double直接转NSDecimalNumber会有精度问题. 并在<a href="http://stackoverflow.com/questions/5304855/proper-way-to-instantiate-an-nsdecimalnumber-from-float-or-double/5304993#5304993" target="_blank" rel="external">stackoverflow的某个回复</a>得到了验证:<br>&emsp;&emsp;So the most consistently accurate conversion/initialisation from a double or float to NSDecimalNumber is using <code>decimalNumberWithString:</code>. But, as Brad Larson has pointed out in his answer, this might be a little slow. His technique for conversion using NSScanner might be better if performance becomes an issue.<br>&emsp;&emsp;那么, 如何由double得到一个NSDecimalNumber呢?<br>&emsp;&emsp;(1)用<code>stringWithFormat:</code>由double得到NSString, 再经<code>decimalNumberWithString:</code>由NSString得到NSDecimalNumber, 这方法貌似精度问题不会出现, 但是可能有一个效率不是很高的问题;<br>&emsp;&emsp;(2)之前引用的那个回复有提到的<a href="http://stackoverflow.com/questions/5304855/proper-way-to-instantiate-an-nsdecimalnumber-from-float-or-double/5305836#5305836" target="_blank" rel="external">1个据说比方法(1)更快的方法</a>:<br>&emsp;&emsp;通过<code>stringWithFormat:</code>由double得到NSString, 再通过<code>[[(NSScanner *) scannerWithString:] scanDecimal:]</code>由NSString得到NSDecimal, 最后通过<code>decimalNumberWithDecimal:</code>由NSDecimal得到NSDecimalNumbe;<br>&emsp;&emsp;2.使用NSDecimalNumber就一定比double等更稳妥更让人放心吗?<br>&emsp;&emsp;我觉得不完全是的, 尤其是将一个无限循环小数的double转为NSDecimalNumber并用于计算的时候,比如:<br><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> u = <span class="number">2.0</span> / <span class="number">3</span>;</div><div class="line"><span class="keyword">double</span> v = u * <span class="number">3</span>;</div><div class="line"><span class="built_in">NSDecimalNumber</span> *w = [<span class="built_in">NSDecimalNumber</span> decimalNumberWithString:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%f"</span>, u]];</div><div class="line"><span class="built_in">NSDecimalNumber</span> *x = [w decimalNumberByMultiplyingBy:[<span class="built_in">NSDecimalNumber</span> decimalNumberWithString:<span class="string">@"3"</span>]];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%f * %d = %f\n %@ * %d = %@"</span>, u, <span class="number">3</span>, v, w, <span class="number">3</span>, x);</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;输出为:<br><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">0.666667</span> * <span class="number">3</span> = <span class="number">2.000000</span> <span class="comment">//double计算得到</span></div><div class="line"><span class="number">0.666667</span> * <span class="number">3</span> = <span class="number">2.000001</span> <span class="comment">//(0.666667 * 3)NSDecimalNumber计算得到</span></div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;那么, 问题来了: 为什么第1个输出为2(0x4000000000000000)呢… (°ー°〃)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;最近工作中遇到一些关于浮点数的问题, 在这里总结一下:&lt;br&gt;&amp;emsp;&amp;emsp;1.如何由一个double的数据得到一个NSDecimalNumber:&lt;br&gt;&amp;emsp;&amp;emsp;经过一阵乱测发现 由 &lt;code&gt;+numberWithFl
    
    </summary>
    
    
      <category term="iOS" scheme="https://simon-is-a-slowcoach.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>关于二分查找的一点备注</title>
    <link href="https://simon-is-a-slowcoach.github.io/2016/10/31/something-about-binary-search/"/>
    <id>https://simon-is-a-slowcoach.github.io/2016/10/31/something-about-binary-search/</id>
    <published>2016-10-30T16:04:50.000Z</published>
    <updated>2016-11-05T14:53:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;同Cifer讨论二分查找时遇到的细节问题, 在这里备注一下:<br>&emsp;&emsp;1.如果该(有序的)列表里可能有重复的元素, 那么在二分查找的过程中找到的index值为第一个还是最后一个?<br>&emsp;&emsp;最终代码(假设列表中的元素为升序):<br>&emsp;&emsp;查找到的index为第1个:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">firstPosition</span><span class="params">(nums, target)</span>:</span></div><div class="line">    length = len(nums)</div><div class="line">    <span class="keyword">if</span> length == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">    start, end = <span class="number">0</span>, length - <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> start + <span class="number">1</span> &lt; end:</div><div class="line">        mid = (start + end) // <span class="number">2</span></div><div class="line">        <span class="keyword">if</span> nums[mid] &lt; target:</div><div class="line">            start = mid</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            end = mid</div><div class="line">    <span class="keyword">if</span> nums[start] == target:</div><div class="line">        <span class="keyword">return</span> start</div><div class="line">    <span class="keyword">elif</span> nums[end] == target:</div><div class="line">        <span class="keyword">return</span> end</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span></div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;查找到的index为最后1个:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lastPosition</span><span class="params">(nums, target)</span>:</span></div><div class="line">    length = len(nums)</div><div class="line">    <span class="keyword">if</span> length == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">    start, end = <span class="number">0</span>, length - <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> start + <span class="number">1</span> &lt; end:</div><div class="line">        mid = (start + end) // <span class="number">2</span></div><div class="line">        <span class="keyword">if</span> nums[mid] &gt; target:</div><div class="line">            end = mid</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            start = mid</div><div class="line">    <span class="keyword">if</span> nums[end] == target:</div><div class="line">        <span class="keyword">return</span> end</div><div class="line">    <span class="keyword">elif</span> nums[start] == target:</div><div class="line">        <span class="keyword">return</span> start</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span></div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;2.用二分法求一个整数的平方根, 取整数就好, 比如求3的平方根得到1, 求5的平方根得到2(<a href="https://leetcode.com/problems/sqrtx/" target="_blank" rel="external">https://leetcode.com/problems/sqrtx/</a>):<br>&emsp;&emsp;我写的答案(还有很大空间可优化):</p>
<pre><code class="python"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">mySqrt</span><span class="params">(self, x)</span>:</span>
        <span class="string">"""
        :type x: int
        :rtype: int
        """</span>
        start, end = <span class="number">0</span>, x
        <span class="keyword">while</span> start + <span class="number">1</span> &lt; end:
            mid = (start + end) // <span class="number">2</span>
            <span class="keyword">if</span> mid ** <span class="number">2</span> &gt; x:
                end = mid
            <span class="keyword">else</span>:
                start = mid
        <span class="keyword">if</span> end ** <span class="number">2</span> &lt;= x:
            <span class="keyword">return</span> end
        <span class="keyword">else</span>:
            <span class="keyword">return</span> start
</code></pre>
<p>&emsp;&emsp;感觉这问题是问题1的加强版, 大同小异…<br>&emsp;&emsp;3.一个整数数组(size为n): 相邻位置的数字是不同的, A[0] &lt; A[1] 且 A[n - 2] &gt; A[n - 1]. 假定P是峰值的位置(A[P] &gt; A[P - 1] 且 A[P] &lt; A[P + 1]), 返回数组中任意一个峰值的位置:<br>&emsp;&emsp;答案 - 使用二分查找: 举个栗子, 按照条件可知A中最少有一个波峰([0:n]左端上升右端下降); 假设找到了中点mid处于上升区间(A[mid] &gt; A[mid - 1] 且 A[mid] &lt; A[mid + 1]), 因为[0:mid]两端都是上升, 所以无法肯定[0:mid]中有波峰, 但是[mid:n]因为左端上升右端下降, 所以至少存在一个波峰, 所以用二分查找法在[mid:n]进行查找…<br>&emsp;&emsp;虽然只是微不足道的几个小细节, 但还是要感谢Cifer, 让懒惰的我多想了几步=w=.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;同Cifer讨论二分查找时遇到的细节问题, 在这里备注一下:&lt;br&gt;&amp;emsp;&amp;emsp;1.如果该(有序的)列表里可能有重复的元素, 那么在二分查找的过程中找到的index值为第一个还是最后一个?&lt;br&gt;&amp;emsp;&amp;emsp;最终代码(假设列表
    
    </summary>
    
    
      <category term="Python" scheme="https://simon-is-a-slowcoach.github.io/tags/Python/"/>
    
      <category term="algorithm" scheme="https://simon-is-a-slowcoach.github.io/tags/algorithm/"/>
    
  </entry>
  
</feed>
